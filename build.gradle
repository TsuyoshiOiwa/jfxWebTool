/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
plugins {
  id 'java'
  id 'eclipse'
  id 'application'
  id 'org.openjfx.javafxplugin' version '0.0.7'
}

group = 'jfxWebTool'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.11
mainClassName = 'oiwa.tsuyoshi.jfxwebtool.HelloFx'


javafx {
  modules = ['javafx.controls', 'javafx.fxml']
  version = "11.0.2"
}

repositories {
	mavenCentral()
}


dependencies {
}

eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.find { it.path == 'src/main/java' }.output = 'bin/main'
                entries.find { it.path == 'src/main/resources' }.output = 'bin/main'

	            def testSrc = entries.find { it.path == 'src/test/java' }
	            testSrc.output = 'bin/test'
	            testSrc.entryAttributes['test'] = 'true'
	            testSrc.entryAttributes['optional'] = 'true'
                testSrc.entryAttributes['ignore_optional_problems'] = 'true'

                def testResources = entries.find { it.path == 'src/test/resources' }
	            testResources.output = 'bin/test'
	            testResources.entryAttributes['test'] = 'true'
                testResources.entryAttributes['optional'] = 'true'
                testResources.entryAttributes['ignore_optional_problems'] = 'true'

                entries.forEach { entry ->
					def entryIn = { it.find { file(entry.path).equals(it) } }
					if (entry.kind == 'lib') {
						entry.entryAttributes['test'] =
							entryIn(configurations.testRuntimeClasspath) &&
							!entryIn(configurations.runtimeClasspath)
					}
	            }
            }
        }
    }
}
